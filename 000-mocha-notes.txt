测试框架 Mocha 实例教程
http://www.imooc.com/article/3207

#测试脚本
- Mocha的作用是运行测试脚本，首先必须学会写测试脚本。所谓"测试脚本"，就是用来测试源码的脚本。

- 通常，测试脚本与所要测试的源码脚本同名，但是后缀名为.test.js（表示测试）或者.spec.js（表示规格）。比如，add.js的测试脚本名字就是add.test.js。

- 测试脚本里面应该包括一个或多个describe块， 每个describe块应该包括一个或多个it块。

#测试套件
- describe块称为"测试套件"（test suite），表示一组相关的测试。
- 它是一个函数，第一个参数是测试套件的名称（"加法函数的测试"），第二个参数是一个实际执行的函数。

#测试用例
- it块称为"测试用例"（test case），表示一个单独的测试，是测试的最小单位。
- 它也是一个函数，第一个参数是测试用例的名称（"1 加 1 应该等于 2"），第二个参数是一个实际执行的函数。

#断言
- 所谓"断言"，就是判断源码的实际执行结果与预期结果是否一致，如果不一致就抛出一个错误。上面这句断言的意思是，调用add(1, 1)，结果应该等于2。

- expect断言的优点是很接近自然语言，下面是一些例子。
// 相等或不相等
expect(4 + 5).to.be.equal(9);
expect(4 + 5).to.be.not.equal(10);
expect(foo).to.be.deep.equal({ bar: 'baz' });

// 布尔值为true
expect('everthing').to.be.ok;
expect(false).to.not.be.ok;

// typeof
expect('test').to.be.a('string');
expect({ foo: 'bar' }).to.be.an('object');
expect(foo).to.be.an.instanceof(Foo);

// include
expect([1,2,3]).to.include(2);
expect('foobar').to.contain('foo');
expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');

// empty
expect([]).to.be.empty;
expect('').to.be.empty;
expect({}).to.be.empty;

// match
expect('foobar').to.match(/^foo/);

- 基本上，expect断言的写法都是一样的。头部是expect方法，尾部是断言方法，比如equal、a/an、ok、match等。两者之间使用to或to.be连接。

- 如果expect断言不成立，就会抛出一个错误。事实上，只要不抛出错误，测试用例就算通过。

- mocha命令后面紧跟测试脚本的路径和文件名，可以指定多个测试脚本。
$ mocha file1 file2 file3

- Mocha默认运行test子目录里面的测试脚本。所以，一般都会把测试脚本放在test目录里面，然后执行mocha就不需要参数了

- Mocha默认只执行test子目录下面第一层的测试用例，不会执行更下层的用例

- 为了改变这种行为，就必须加上--recursive参数，这时test子目录下面所有的测试用例----不管在哪一层----都会执行

#通配符
- 命令行指定测试脚本时，可以使用通配符，同时指定多个文件。
$ mocha spec/{my,awesome}.js //指定执行spec目录下面的my.js和awesome.js
$ mocha test/unit/*.js //指定执行test/unit目录下面的所有js文件。

- 除了使用Shell通配符，还可以使用Node通配符。
$ mocha 'test/**/*.@(js|jsx)'
上面代码指定运行test目录下面任何子目录中、文件后缀名为js或jsx的测试脚本。注意，Node的通配符要放在单引号之中，否则星号（*）会先被Shell解释

- 上面这行Node通配符，如果改用Shell通配符，要写成下面这样。
$ mocha test/{,**/}*.{js,jsx}

#命令行参数
--help或-h参数，用来查看Mocha的所有命令行参数。
$ mocha --help
--reporter参数用来指定测试报告的格式，默认是spec格式。
$ mocha --reporter spec
$ mocha --reporter tap //tap报告格式
$ mocha --reporters //显示所有内置的报告格式。
$ mocha --growl //打开--growl参数，就会将测试结果在桌面显示。
$ mocha --watch //--watch参数用来监视指定的测试脚本。只要测试脚本有变化，就会自动运行Mocha。
$ mocha --bail //--bail参数指定只要有一个测试用例没有通过，就停止执行后面的测试用例。这对持续集成很有用。
$ mocha --grep "1 加 1" //--grep参数用于搜索测试用例的名称（即it块的第一个参数），然后只执行匹配的测试用例。
$ mocha --grep "1 加 1" --invert //--invert参数表示只运行不符合条件的测试脚本，必须与--grep参数配合使用。

#配置文件mocha.opts
Mocha允许在test目录下面，放置配置文件mocha.opts，把命令行参数写在里面。

#ES6测试
- 如果测试脚本是用ES6写的，那么运行测试之前，需要先用Babel转码。
- ES6转码，需要安装Babel。
$ npm install babel-core babel-preset-es2015 --save-dev
然后，在项目目录下面，新建一个.babelrc配置文件。
{
  "presets": [ "es2015" ]
}
- 最后，使用--compilers参数指定测试脚本的转码器。
$ ../node_modules/mocha/bin/mocha --compilers js:babel-core/register

#异步测试
- Mocha默认每个测试用例最多执行2000毫秒，如果到时没有得到结果，就报错。
- 对于涉及异步操作的测试用例，这个时间往往是不够的，需要用-t或--timeout参数指定超时门槛。
$ mocha -t 5000 timeout.test.js
- Mocha默认会高亮显示超过75毫秒的测试用例，可以用-s或--slow调整这个参数。
$ mocha -t 5000 -s 1000 timeout.test.js

#测试用例的钩子
Mocha在describe块之中，提供测试用例的四个钩子：before()、after()、beforeEach()和afterEach()。它们会在指定时间执行。

describe('hooks', function() { 

	before(function() { // 在本区块的所有测试用例之前执行 }); 

	after(function() { // 在本区块的所有测试用例之后执行 }); 

	beforeEach(function() { // 在本区块的每个测试用例之前执行 }); 

	afterEach(function() { // 在本区块的每个测试用例之后执行 }); 

	// test cases 

});

#测试用例管理
- 大型项目有很多测试用例。有时，我们希望只运行其中的几个，这时可以用only方法。
- describe块和it块都允许调用only方法，表示只运行某个测试套件或测试用例。

#浏览器测试
- 除了在命令行运行，Mocha还可以在浏览器运行。

- 首先，使用mocha init命令在指定目录生成初始化文件。
$ mocha init demo08 //运行上面命令，就会在demo08目录下生成index.html文件，以及配套的脚本和样式表。

#生成规格文件
- Mocha支持从测试用例生成规格文件。
$ mocha --recursive -R markdown > spec.md //根据test目录的所有测试脚本，生成一个规格文件spec.md。-R markdown参数指定规格报告是markdown格式。
$ mocha --recursive -R doc > spec.html //生成HTML格式的报告spec.html，使用下面的命令。
